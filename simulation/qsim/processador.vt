// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/20/2023 16:35:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_vlg_check_tst (
	alu_s0,
	alu_s1,
	D_addr,
	D_rd,
	D_wr,
	DES,
	E_D,
	I_rd,
	IR_out,
	out_ra,
	out_rb,
	out_rc,
	out_w,
	PC_out,
	RF_Rp_addr,
	RF_Rp_rd,
	RF_Rq_addr,
	RF_Rq_rd,
	RF_s0,
	RF_s1,
	RF_W_addr,
	RF_W_data,
	RF_W_wr,
	saida,
	sampler_rx
);
input  alu_s0;
input  alu_s1;
input [7:0] D_addr;
input  D_rd;
input  D_wr;
input  DES;
input  E_D;
input  I_rd;
input [15:0] IR_out;
input [3:0] out_ra;
input [3:0] out_rb;
input [3:0] out_rc;
input [15:0] out_w;
input [3:0] PC_out;
input [3:0] RF_Rp_addr;
input  RF_Rp_rd;
input [3:0] RF_Rq_addr;
input  RF_Rq_rd;
input  RF_s0;
input  RF_s1;
input [3:0] RF_W_addr;
input [15:0] RF_W_data;
input  RF_W_wr;
input [15:0] saida;
input sampler_rx;

reg  alu_s0_expected;
reg  alu_s1_expected;
reg [7:0] D_addr_expected;
reg  D_rd_expected;
reg  D_wr_expected;
reg  DES_expected;
reg  E_D_expected;
reg  I_rd_expected;
reg [15:0] IR_out_expected;
reg [3:0] out_ra_expected;
reg [3:0] out_rb_expected;
reg [3:0] out_rc_expected;
reg [15:0] out_w_expected;
reg [3:0] PC_out_expected;
reg [3:0] RF_Rp_addr_expected;
reg  RF_Rp_rd_expected;
reg [3:0] RF_Rq_addr_expected;
reg  RF_Rq_rd_expected;
reg  RF_s0_expected;
reg  RF_s1_expected;
reg [3:0] RF_W_addr_expected;
reg [15:0] RF_W_data_expected;
reg  RF_W_wr_expected;
reg [15:0] saida_expected;

reg  alu_s0_prev;
reg  alu_s1_prev;
reg [7:0] D_addr_prev;
reg  D_rd_prev;
reg  D_wr_prev;
reg  DES_prev;
reg  E_D_prev;
reg  I_rd_prev;
reg [15:0] IR_out_prev;
reg [3:0] out_ra_prev;
reg [3:0] out_rb_prev;
reg [3:0] out_rc_prev;
reg [15:0] out_w_prev;
reg [3:0] PC_out_prev;
reg [3:0] RF_Rp_addr_prev;
reg  RF_Rp_rd_prev;
reg [3:0] RF_Rq_addr_prev;
reg  RF_Rq_rd_prev;
reg  RF_s0_prev;
reg  RF_s1_prev;
reg [3:0] RF_W_addr_prev;
reg [15:0] RF_W_data_prev;
reg  RF_W_wr_prev;
reg [15:0] saida_prev;

reg  alu_s0_expected_prev;
reg  alu_s1_expected_prev;
reg [7:0] D_addr_expected_prev;
reg  D_rd_expected_prev;
reg  D_wr_expected_prev;
reg  DES_expected_prev;
reg  E_D_expected_prev;
reg  I_rd_expected_prev;
reg [15:0] IR_out_expected_prev;
reg [3:0] out_ra_expected_prev;
reg [3:0] out_rb_expected_prev;
reg [3:0] out_rc_expected_prev;
reg [15:0] out_w_expected_prev;
reg [3:0] PC_out_expected_prev;
reg [3:0] RF_Rp_addr_expected_prev;
reg  RF_Rp_rd_expected_prev;
reg [3:0] RF_Rq_addr_expected_prev;
reg  RF_Rq_rd_expected_prev;
reg  RF_s0_expected_prev;
reg  RF_s1_expected_prev;
reg [3:0] RF_W_addr_expected_prev;
reg [15:0] RF_W_data_expected_prev;
reg  RF_W_wr_expected_prev;
reg [15:0] saida_expected_prev;

reg  last_alu_s0_exp;
reg  last_alu_s1_exp;
reg [7:0] last_D_addr_exp;
reg  last_D_rd_exp;
reg  last_D_wr_exp;
reg  last_DES_exp;
reg  last_E_D_exp;
reg  last_I_rd_exp;
reg [15:0] last_IR_out_exp;
reg [3:0] last_out_ra_exp;
reg [3:0] last_out_rb_exp;
reg [3:0] last_out_rc_exp;
reg [15:0] last_out_w_exp;
reg [3:0] last_PC_out_exp;
reg [3:0] last_RF_Rp_addr_exp;
reg  last_RF_Rp_rd_exp;
reg [3:0] last_RF_Rq_addr_exp;
reg  last_RF_Rq_rd_exp;
reg  last_RF_s0_exp;
reg  last_RF_s1_exp;
reg [3:0] last_RF_W_addr_exp;
reg [15:0] last_RF_W_data_exp;
reg  last_RF_W_wr_exp;
reg [15:0] last_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:24] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 24'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_s0_prev = alu_s0;
	alu_s1_prev = alu_s1;
	D_addr_prev = D_addr;
	D_rd_prev = D_rd;
	D_wr_prev = D_wr;
	DES_prev = DES;
	E_D_prev = E_D;
	I_rd_prev = I_rd;
	IR_out_prev = IR_out;
	out_ra_prev = out_ra;
	out_rb_prev = out_rb;
	out_rc_prev = out_rc;
	out_w_prev = out_w;
	PC_out_prev = PC_out;
	RF_Rp_addr_prev = RF_Rp_addr;
	RF_Rp_rd_prev = RF_Rp_rd;
	RF_Rq_addr_prev = RF_Rq_addr;
	RF_Rq_rd_prev = RF_Rq_rd;
	RF_s0_prev = RF_s0;
	RF_s1_prev = RF_s1;
	RF_W_addr_prev = RF_W_addr;
	RF_W_data_prev = RF_W_data;
	RF_W_wr_prev = RF_W_wr;
	saida_prev = saida;
end

// update expected /o prevs

always @(trigger)
begin
	alu_s0_expected_prev = alu_s0_expected;
	alu_s1_expected_prev = alu_s1_expected;
	D_addr_expected_prev = D_addr_expected;
	D_rd_expected_prev = D_rd_expected;
	D_wr_expected_prev = D_wr_expected;
	DES_expected_prev = DES_expected;
	E_D_expected_prev = E_D_expected;
	I_rd_expected_prev = I_rd_expected;
	IR_out_expected_prev = IR_out_expected;
	out_ra_expected_prev = out_ra_expected;
	out_rb_expected_prev = out_rb_expected;
	out_rc_expected_prev = out_rc_expected;
	out_w_expected_prev = out_w_expected;
	PC_out_expected_prev = PC_out_expected;
	RF_Rp_addr_expected_prev = RF_Rp_addr_expected;
	RF_Rp_rd_expected_prev = RF_Rp_rd_expected;
	RF_Rq_addr_expected_prev = RF_Rq_addr_expected;
	RF_Rq_rd_expected_prev = RF_Rq_rd_expected;
	RF_s0_expected_prev = RF_s0_expected;
	RF_s1_expected_prev = RF_s1_expected;
	RF_W_addr_expected_prev = RF_W_addr_expected;
	RF_W_data_expected_prev = RF_W_data_expected;
	RF_W_wr_expected_prev = RF_W_wr_expected;
	saida_expected_prev = saida_expected;
end



// expected alu_s0
initial
begin
	alu_s0_expected = 1'bX;
end 

// expected alu_s1
initial
begin
	alu_s1_expected = 1'bX;
end 
// expected D_addr[ 7 ]
initial
begin
	D_addr_expected[7] = 1'bX;
end 
// expected D_addr[ 6 ]
initial
begin
	D_addr_expected[6] = 1'bX;
end 
// expected D_addr[ 5 ]
initial
begin
	D_addr_expected[5] = 1'bX;
end 
// expected D_addr[ 4 ]
initial
begin
	D_addr_expected[4] = 1'bX;
end 
// expected D_addr[ 3 ]
initial
begin
	D_addr_expected[3] = 1'bX;
end 
// expected D_addr[ 2 ]
initial
begin
	D_addr_expected[2] = 1'bX;
end 
// expected D_addr[ 1 ]
initial
begin
	D_addr_expected[1] = 1'bX;
end 
// expected D_addr[ 0 ]
initial
begin
	D_addr_expected[0] = 1'bX;
end 

// expected D_rd
initial
begin
	D_rd_expected = 1'bX;
end 

// expected D_wr
initial
begin
	D_wr_expected = 1'bX;
end 

// expected DES
initial
begin
	DES_expected = 1'bX;
end 

// expected E_D
initial
begin
	E_D_expected = 1'bX;
end 

// expected I_rd
initial
begin
	I_rd_expected = 1'bX;
end 
// expected IR_out[ 15 ]
initial
begin
	IR_out_expected[15] = 1'bX;
end 
// expected IR_out[ 14 ]
initial
begin
	IR_out_expected[14] = 1'bX;
end 
// expected IR_out[ 13 ]
initial
begin
	IR_out_expected[13] = 1'bX;
end 
// expected IR_out[ 12 ]
initial
begin
	IR_out_expected[12] = 1'bX;
end 
// expected IR_out[ 11 ]
initial
begin
	IR_out_expected[11] = 1'bX;
end 
// expected IR_out[ 10 ]
initial
begin
	IR_out_expected[10] = 1'bX;
end 
// expected IR_out[ 9 ]
initial
begin
	IR_out_expected[9] = 1'bX;
end 
// expected IR_out[ 8 ]
initial
begin
	IR_out_expected[8] = 1'bX;
end 
// expected IR_out[ 7 ]
initial
begin
	IR_out_expected[7] = 1'bX;
end 
// expected IR_out[ 6 ]
initial
begin
	IR_out_expected[6] = 1'bX;
end 
// expected IR_out[ 5 ]
initial
begin
	IR_out_expected[5] = 1'bX;
end 
// expected IR_out[ 4 ]
initial
begin
	IR_out_expected[4] = 1'bX;
end 
// expected IR_out[ 3 ]
initial
begin
	IR_out_expected[3] = 1'bX;
end 
// expected IR_out[ 2 ]
initial
begin
	IR_out_expected[2] = 1'bX;
end 
// expected IR_out[ 1 ]
initial
begin
	IR_out_expected[1] = 1'bX;
end 
// expected IR_out[ 0 ]
initial
begin
	IR_out_expected[0] = 1'bX;
end 
// expected out_ra[ 3 ]
initial
begin
	out_ra_expected[3] = 1'bX;
end 
// expected out_ra[ 2 ]
initial
begin
	out_ra_expected[2] = 1'bX;
end 
// expected out_ra[ 1 ]
initial
begin
	out_ra_expected[1] = 1'bX;
end 
// expected out_ra[ 0 ]
initial
begin
	out_ra_expected[0] = 1'bX;
end 
// expected out_rb[ 3 ]
initial
begin
	out_rb_expected[3] = 1'bX;
end 
// expected out_rb[ 2 ]
initial
begin
	out_rb_expected[2] = 1'bX;
end 
// expected out_rb[ 1 ]
initial
begin
	out_rb_expected[1] = 1'bX;
end 
// expected out_rb[ 0 ]
initial
begin
	out_rb_expected[0] = 1'bX;
end 
// expected out_rc[ 3 ]
initial
begin
	out_rc_expected[3] = 1'bX;
end 
// expected out_rc[ 2 ]
initial
begin
	out_rc_expected[2] = 1'bX;
end 
// expected out_rc[ 1 ]
initial
begin
	out_rc_expected[1] = 1'bX;
end 
// expected out_rc[ 0 ]
initial
begin
	out_rc_expected[0] = 1'bX;
end 
// expected out_w[ 15 ]
initial
begin
	out_w_expected[15] = 1'bX;
end 
// expected out_w[ 14 ]
initial
begin
	out_w_expected[14] = 1'bX;
end 
// expected out_w[ 13 ]
initial
begin
	out_w_expected[13] = 1'bX;
end 
// expected out_w[ 12 ]
initial
begin
	out_w_expected[12] = 1'bX;
end 
// expected out_w[ 11 ]
initial
begin
	out_w_expected[11] = 1'bX;
end 
// expected out_w[ 10 ]
initial
begin
	out_w_expected[10] = 1'bX;
end 
// expected out_w[ 9 ]
initial
begin
	out_w_expected[9] = 1'bX;
end 
// expected out_w[ 8 ]
initial
begin
	out_w_expected[8] = 1'bX;
end 
// expected out_w[ 7 ]
initial
begin
	out_w_expected[7] = 1'bX;
end 
// expected out_w[ 6 ]
initial
begin
	out_w_expected[6] = 1'bX;
end 
// expected out_w[ 5 ]
initial
begin
	out_w_expected[5] = 1'bX;
end 
// expected out_w[ 4 ]
initial
begin
	out_w_expected[4] = 1'bX;
end 
// expected out_w[ 3 ]
initial
begin
	out_w_expected[3] = 1'bX;
end 
// expected out_w[ 2 ]
initial
begin
	out_w_expected[2] = 1'bX;
end 
// expected out_w[ 1 ]
initial
begin
	out_w_expected[1] = 1'bX;
end 
// expected out_w[ 0 ]
initial
begin
	out_w_expected[0] = 1'bX;
end 
// expected PC_out[ 3 ]
initial
begin
	PC_out_expected[3] = 1'bX;
end 
// expected PC_out[ 2 ]
initial
begin
	PC_out_expected[2] = 1'bX;
end 
// expected PC_out[ 1 ]
initial
begin
	PC_out_expected[1] = 1'bX;
end 
// expected PC_out[ 0 ]
initial
begin
	PC_out_expected[0] = 1'bX;
end 
// expected RF_Rp_addr[ 3 ]
initial
begin
	RF_Rp_addr_expected[3] = 1'bX;
end 
// expected RF_Rp_addr[ 2 ]
initial
begin
	RF_Rp_addr_expected[2] = 1'bX;
end 
// expected RF_Rp_addr[ 1 ]
initial
begin
	RF_Rp_addr_expected[1] = 1'bX;
end 
// expected RF_Rp_addr[ 0 ]
initial
begin
	RF_Rp_addr_expected[0] = 1'bX;
end 

// expected RF_Rp_rd
initial
begin
	RF_Rp_rd_expected = 1'bX;
end 
// expected RF_Rq_addr[ 3 ]
initial
begin
	RF_Rq_addr_expected[3] = 1'bX;
end 
// expected RF_Rq_addr[ 2 ]
initial
begin
	RF_Rq_addr_expected[2] = 1'bX;
end 
// expected RF_Rq_addr[ 1 ]
initial
begin
	RF_Rq_addr_expected[1] = 1'bX;
end 
// expected RF_Rq_addr[ 0 ]
initial
begin
	RF_Rq_addr_expected[0] = 1'bX;
end 

// expected RF_Rq_rd
initial
begin
	RF_Rq_rd_expected = 1'bX;
end 

// expected RF_s0
initial
begin
	RF_s0_expected = 1'bX;
end 

// expected RF_s1
initial
begin
	RF_s1_expected = 1'bX;
end 
// expected RF_W_addr[ 3 ]
initial
begin
	RF_W_addr_expected[3] = 1'bX;
end 
// expected RF_W_addr[ 2 ]
initial
begin
	RF_W_addr_expected[2] = 1'bX;
end 
// expected RF_W_addr[ 1 ]
initial
begin
	RF_W_addr_expected[1] = 1'bX;
end 
// expected RF_W_addr[ 0 ]
initial
begin
	RF_W_addr_expected[0] = 1'bX;
end 
// expected RF_W_data[ 15 ]
initial
begin
	RF_W_data_expected[15] = 1'bX;
end 
// expected RF_W_data[ 14 ]
initial
begin
	RF_W_data_expected[14] = 1'bX;
end 
// expected RF_W_data[ 13 ]
initial
begin
	RF_W_data_expected[13] = 1'bX;
end 
// expected RF_W_data[ 12 ]
initial
begin
	RF_W_data_expected[12] = 1'bX;
end 
// expected RF_W_data[ 11 ]
initial
begin
	RF_W_data_expected[11] = 1'bX;
end 
// expected RF_W_data[ 10 ]
initial
begin
	RF_W_data_expected[10] = 1'bX;
end 
// expected RF_W_data[ 9 ]
initial
begin
	RF_W_data_expected[9] = 1'bX;
end 
// expected RF_W_data[ 8 ]
initial
begin
	RF_W_data_expected[8] = 1'bX;
end 
// expected RF_W_data[ 7 ]
initial
begin
	RF_W_data_expected[7] = 1'bX;
end 
// expected RF_W_data[ 6 ]
initial
begin
	RF_W_data_expected[6] = 1'bX;
end 
// expected RF_W_data[ 5 ]
initial
begin
	RF_W_data_expected[5] = 1'bX;
end 
// expected RF_W_data[ 4 ]
initial
begin
	RF_W_data_expected[4] = 1'bX;
end 
// expected RF_W_data[ 3 ]
initial
begin
	RF_W_data_expected[3] = 1'bX;
end 
// expected RF_W_data[ 2 ]
initial
begin
	RF_W_data_expected[2] = 1'bX;
end 
// expected RF_W_data[ 1 ]
initial
begin
	RF_W_data_expected[1] = 1'bX;
end 
// expected RF_W_data[ 0 ]
initial
begin
	RF_W_data_expected[0] = 1'bX;
end 

// expected RF_W_wr
initial
begin
	RF_W_wr_expected = 1'bX;
end 
// expected saida[ 15 ]
initial
begin
	saida_expected[15] = 1'bX;
end 
// expected saida[ 14 ]
initial
begin
	saida_expected[14] = 1'bX;
end 
// expected saida[ 13 ]
initial
begin
	saida_expected[13] = 1'bX;
end 
// expected saida[ 12 ]
initial
begin
	saida_expected[12] = 1'bX;
end 
// expected saida[ 11 ]
initial
begin
	saida_expected[11] = 1'bX;
end 
// expected saida[ 10 ]
initial
begin
	saida_expected[10] = 1'bX;
end 
// expected saida[ 9 ]
initial
begin
	saida_expected[9] = 1'bX;
end 
// expected saida[ 8 ]
initial
begin
	saida_expected[8] = 1'bX;
end 
// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 
// generate trigger
always @(alu_s0_expected or alu_s0 or alu_s1_expected or alu_s1 or D_addr_expected or D_addr or D_rd_expected or D_rd or D_wr_expected or D_wr or DES_expected or DES or E_D_expected or E_D or I_rd_expected or I_rd or IR_out_expected or IR_out or out_ra_expected or out_ra or out_rb_expected or out_rb or out_rc_expected or out_rc or out_w_expected or out_w or PC_out_expected or PC_out or RF_Rp_addr_expected or RF_Rp_addr or RF_Rp_rd_expected or RF_Rp_rd or RF_Rq_addr_expected or RF_Rq_addr or RF_Rq_rd_expected or RF_Rq_rd or RF_s0_expected or RF_s0 or RF_s1_expected or RF_s1 or RF_W_addr_expected or RF_W_addr or RF_W_data_expected or RF_W_data or RF_W_wr_expected or RF_W_wr or saida_expected or saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_s0 = %b | expected alu_s1 = %b | expected D_addr = %b | expected D_rd = %b | expected D_wr = %b | expected DES = %b | expected E_D = %b | expected I_rd = %b | expected IR_out = %b | expected out_ra = %b | expected out_rb = %b | expected out_rc = %b | expected out_w = %b | expected PC_out = %b | expected RF_Rp_addr = %b | expected RF_Rp_rd = %b | expected RF_Rq_addr = %b | expected RF_Rq_rd = %b | expected RF_s0 = %b | expected RF_s1 = %b | expected RF_W_addr = %b | expected RF_W_data = %b | expected RF_W_wr = %b | expected saida = %b | ",alu_s0_expected_prev,alu_s1_expected_prev,D_addr_expected_prev,D_rd_expected_prev,D_wr_expected_prev,DES_expected_prev,E_D_expected_prev,I_rd_expected_prev,IR_out_expected_prev,out_ra_expected_prev,out_rb_expected_prev,out_rc_expected_prev,out_w_expected_prev,PC_out_expected_prev,RF_Rp_addr_expected_prev,RF_Rp_rd_expected_prev,RF_Rq_addr_expected_prev,RF_Rq_rd_expected_prev,RF_s0_expected_prev,RF_s1_expected_prev,RF_W_addr_expected_prev,RF_W_data_expected_prev,RF_W_wr_expected_prev,saida_expected_prev);
	$display("| real alu_s0 = %b | real alu_s1 = %b | real D_addr = %b | real D_rd = %b | real D_wr = %b | real DES = %b | real E_D = %b | real I_rd = %b | real IR_out = %b | real out_ra = %b | real out_rb = %b | real out_rc = %b | real out_w = %b | real PC_out = %b | real RF_Rp_addr = %b | real RF_Rp_rd = %b | real RF_Rq_addr = %b | real RF_Rq_rd = %b | real RF_s0 = %b | real RF_s1 = %b | real RF_W_addr = %b | real RF_W_data = %b | real RF_W_wr = %b | real saida = %b | ",alu_s0_prev,alu_s1_prev,D_addr_prev,D_rd_prev,D_wr_prev,DES_prev,E_D_prev,I_rd_prev,IR_out_prev,out_ra_prev,out_rb_prev,out_rc_prev,out_w_prev,PC_out_prev,RF_Rp_addr_prev,RF_Rp_rd_prev,RF_Rq_addr_prev,RF_Rq_rd_prev,RF_s0_prev,RF_s1_prev,RF_W_addr_prev,RF_W_data_prev,RF_W_wr_prev,saida_prev);
`endif
	if (
		( alu_s0_expected_prev !== 1'bx ) && ( alu_s0_prev !== alu_s0_expected_prev )
		&& ((alu_s0_expected_prev !== last_alu_s0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s0_expected_prev);
		$display ("     Real value = %b", alu_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_s0_exp = alu_s0_expected_prev;
	end
	if (
		( alu_s1_expected_prev !== 1'bx ) && ( alu_s1_prev !== alu_s1_expected_prev )
		&& ((alu_s1_expected_prev !== last_alu_s1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s1_expected_prev);
		$display ("     Real value = %b", alu_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_s1_exp = alu_s1_expected_prev;
	end
	if (
		( D_addr_expected_prev[0] !== 1'bx ) && ( D_addr_prev[0] !== D_addr_expected_prev[0] )
		&& ((D_addr_expected_prev[0] !== last_D_addr_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[0] = D_addr_expected_prev[0];
	end
	if (
		( D_addr_expected_prev[1] !== 1'bx ) && ( D_addr_prev[1] !== D_addr_expected_prev[1] )
		&& ((D_addr_expected_prev[1] !== last_D_addr_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[1] = D_addr_expected_prev[1];
	end
	if (
		( D_addr_expected_prev[2] !== 1'bx ) && ( D_addr_prev[2] !== D_addr_expected_prev[2] )
		&& ((D_addr_expected_prev[2] !== last_D_addr_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[2] = D_addr_expected_prev[2];
	end
	if (
		( D_addr_expected_prev[3] !== 1'bx ) && ( D_addr_prev[3] !== D_addr_expected_prev[3] )
		&& ((D_addr_expected_prev[3] !== last_D_addr_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[3] = D_addr_expected_prev[3];
	end
	if (
		( D_addr_expected_prev[4] !== 1'bx ) && ( D_addr_prev[4] !== D_addr_expected_prev[4] )
		&& ((D_addr_expected_prev[4] !== last_D_addr_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[4] = D_addr_expected_prev[4];
	end
	if (
		( D_addr_expected_prev[5] !== 1'bx ) && ( D_addr_prev[5] !== D_addr_expected_prev[5] )
		&& ((D_addr_expected_prev[5] !== last_D_addr_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[5] = D_addr_expected_prev[5];
	end
	if (
		( D_addr_expected_prev[6] !== 1'bx ) && ( D_addr_prev[6] !== D_addr_expected_prev[6] )
		&& ((D_addr_expected_prev[6] !== last_D_addr_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[6] = D_addr_expected_prev[6];
	end
	if (
		( D_addr_expected_prev[7] !== 1'bx ) && ( D_addr_prev[7] !== D_addr_expected_prev[7] )
		&& ((D_addr_expected_prev[7] !== last_D_addr_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[7] = D_addr_expected_prev[7];
	end
	if (
		( D_rd_expected_prev !== 1'bx ) && ( D_rd_prev !== D_rd_expected_prev )
		&& ((D_rd_expected_prev !== last_D_rd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rd_expected_prev);
		$display ("     Real value = %b", D_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_rd_exp = D_rd_expected_prev;
	end
	if (
		( D_wr_expected_prev !== 1'bx ) && ( D_wr_prev !== D_wr_expected_prev )
		&& ((D_wr_expected_prev !== last_D_wr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_wr_expected_prev);
		$display ("     Real value = %b", D_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_wr_exp = D_wr_expected_prev;
	end
	if (
		( DES_expected_prev !== 1'bx ) && ( DES_prev !== DES_expected_prev )
		&& ((DES_expected_prev !== last_DES_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DES :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DES_expected_prev);
		$display ("     Real value = %b", DES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DES_exp = DES_expected_prev;
	end
	if (
		( E_D_expected_prev !== 1'bx ) && ( E_D_prev !== E_D_expected_prev )
		&& ((E_D_expected_prev !== last_E_D_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_D_expected_prev);
		$display ("     Real value = %b", E_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_E_D_exp = E_D_expected_prev;
	end
	if (
		( I_rd_expected_prev !== 1'bx ) && ( I_rd_prev !== I_rd_expected_prev )
		&& ((I_rd_expected_prev !== last_I_rd_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_expected_prev);
		$display ("     Real value = %b", I_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_I_rd_exp = I_rd_expected_prev;
	end
	if (
		( IR_out_expected_prev[0] !== 1'bx ) && ( IR_out_prev[0] !== IR_out_expected_prev[0] )
		&& ((IR_out_expected_prev[0] !== last_IR_out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[0] = IR_out_expected_prev[0];
	end
	if (
		( IR_out_expected_prev[1] !== 1'bx ) && ( IR_out_prev[1] !== IR_out_expected_prev[1] )
		&& ((IR_out_expected_prev[1] !== last_IR_out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[1] = IR_out_expected_prev[1];
	end
	if (
		( IR_out_expected_prev[2] !== 1'bx ) && ( IR_out_prev[2] !== IR_out_expected_prev[2] )
		&& ((IR_out_expected_prev[2] !== last_IR_out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[2] = IR_out_expected_prev[2];
	end
	if (
		( IR_out_expected_prev[3] !== 1'bx ) && ( IR_out_prev[3] !== IR_out_expected_prev[3] )
		&& ((IR_out_expected_prev[3] !== last_IR_out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[3] = IR_out_expected_prev[3];
	end
	if (
		( IR_out_expected_prev[4] !== 1'bx ) && ( IR_out_prev[4] !== IR_out_expected_prev[4] )
		&& ((IR_out_expected_prev[4] !== last_IR_out_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[4] = IR_out_expected_prev[4];
	end
	if (
		( IR_out_expected_prev[5] !== 1'bx ) && ( IR_out_prev[5] !== IR_out_expected_prev[5] )
		&& ((IR_out_expected_prev[5] !== last_IR_out_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[5] = IR_out_expected_prev[5];
	end
	if (
		( IR_out_expected_prev[6] !== 1'bx ) && ( IR_out_prev[6] !== IR_out_expected_prev[6] )
		&& ((IR_out_expected_prev[6] !== last_IR_out_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[6] = IR_out_expected_prev[6];
	end
	if (
		( IR_out_expected_prev[7] !== 1'bx ) && ( IR_out_prev[7] !== IR_out_expected_prev[7] )
		&& ((IR_out_expected_prev[7] !== last_IR_out_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[7] = IR_out_expected_prev[7];
	end
	if (
		( IR_out_expected_prev[8] !== 1'bx ) && ( IR_out_prev[8] !== IR_out_expected_prev[8] )
		&& ((IR_out_expected_prev[8] !== last_IR_out_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[8] = IR_out_expected_prev[8];
	end
	if (
		( IR_out_expected_prev[9] !== 1'bx ) && ( IR_out_prev[9] !== IR_out_expected_prev[9] )
		&& ((IR_out_expected_prev[9] !== last_IR_out_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[9] = IR_out_expected_prev[9];
	end
	if (
		( IR_out_expected_prev[10] !== 1'bx ) && ( IR_out_prev[10] !== IR_out_expected_prev[10] )
		&& ((IR_out_expected_prev[10] !== last_IR_out_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[10] = IR_out_expected_prev[10];
	end
	if (
		( IR_out_expected_prev[11] !== 1'bx ) && ( IR_out_prev[11] !== IR_out_expected_prev[11] )
		&& ((IR_out_expected_prev[11] !== last_IR_out_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[11] = IR_out_expected_prev[11];
	end
	if (
		( IR_out_expected_prev[12] !== 1'bx ) && ( IR_out_prev[12] !== IR_out_expected_prev[12] )
		&& ((IR_out_expected_prev[12] !== last_IR_out_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[12] = IR_out_expected_prev[12];
	end
	if (
		( IR_out_expected_prev[13] !== 1'bx ) && ( IR_out_prev[13] !== IR_out_expected_prev[13] )
		&& ((IR_out_expected_prev[13] !== last_IR_out_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[13] = IR_out_expected_prev[13];
	end
	if (
		( IR_out_expected_prev[14] !== 1'bx ) && ( IR_out_prev[14] !== IR_out_expected_prev[14] )
		&& ((IR_out_expected_prev[14] !== last_IR_out_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[14] = IR_out_expected_prev[14];
	end
	if (
		( IR_out_expected_prev[15] !== 1'bx ) && ( IR_out_prev[15] !== IR_out_expected_prev[15] )
		&& ((IR_out_expected_prev[15] !== last_IR_out_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IR_out_exp[15] = IR_out_expected_prev[15];
	end
	if (
		( out_ra_expected_prev[0] !== 1'bx ) && ( out_ra_prev[0] !== out_ra_expected_prev[0] )
		&& ((out_ra_expected_prev[0] !== last_out_ra_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_ra[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_ra_expected_prev);
		$display ("     Real value = %b", out_ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_ra_exp[0] = out_ra_expected_prev[0];
	end
	if (
		( out_ra_expected_prev[1] !== 1'bx ) && ( out_ra_prev[1] !== out_ra_expected_prev[1] )
		&& ((out_ra_expected_prev[1] !== last_out_ra_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_ra[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_ra_expected_prev);
		$display ("     Real value = %b", out_ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_ra_exp[1] = out_ra_expected_prev[1];
	end
	if (
		( out_ra_expected_prev[2] !== 1'bx ) && ( out_ra_prev[2] !== out_ra_expected_prev[2] )
		&& ((out_ra_expected_prev[2] !== last_out_ra_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_ra[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_ra_expected_prev);
		$display ("     Real value = %b", out_ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_ra_exp[2] = out_ra_expected_prev[2];
	end
	if (
		( out_ra_expected_prev[3] !== 1'bx ) && ( out_ra_prev[3] !== out_ra_expected_prev[3] )
		&& ((out_ra_expected_prev[3] !== last_out_ra_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_ra[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_ra_expected_prev);
		$display ("     Real value = %b", out_ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_ra_exp[3] = out_ra_expected_prev[3];
	end
	if (
		( out_rb_expected_prev[0] !== 1'bx ) && ( out_rb_prev[0] !== out_rb_expected_prev[0] )
		&& ((out_rb_expected_prev[0] !== last_out_rb_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rb[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rb_expected_prev);
		$display ("     Real value = %b", out_rb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out_rb_exp[0] = out_rb_expected_prev[0];
	end
	if (
		( out_rb_expected_prev[1] !== 1'bx ) && ( out_rb_prev[1] !== out_rb_expected_prev[1] )
		&& ((out_rb_expected_prev[1] !== last_out_rb_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rb[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rb_expected_prev);
		$display ("     Real value = %b", out_rb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out_rb_exp[1] = out_rb_expected_prev[1];
	end
	if (
		( out_rb_expected_prev[2] !== 1'bx ) && ( out_rb_prev[2] !== out_rb_expected_prev[2] )
		&& ((out_rb_expected_prev[2] !== last_out_rb_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rb[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rb_expected_prev);
		$display ("     Real value = %b", out_rb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out_rb_exp[2] = out_rb_expected_prev[2];
	end
	if (
		( out_rb_expected_prev[3] !== 1'bx ) && ( out_rb_prev[3] !== out_rb_expected_prev[3] )
		&& ((out_rb_expected_prev[3] !== last_out_rb_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rb[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rb_expected_prev);
		$display ("     Real value = %b", out_rb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out_rb_exp[3] = out_rb_expected_prev[3];
	end
	if (
		( out_rc_expected_prev[0] !== 1'bx ) && ( out_rc_prev[0] !== out_rc_expected_prev[0] )
		&& ((out_rc_expected_prev[0] !== last_out_rc_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rc_expected_prev);
		$display ("     Real value = %b", out_rc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out_rc_exp[0] = out_rc_expected_prev[0];
	end
	if (
		( out_rc_expected_prev[1] !== 1'bx ) && ( out_rc_prev[1] !== out_rc_expected_prev[1] )
		&& ((out_rc_expected_prev[1] !== last_out_rc_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rc_expected_prev);
		$display ("     Real value = %b", out_rc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out_rc_exp[1] = out_rc_expected_prev[1];
	end
	if (
		( out_rc_expected_prev[2] !== 1'bx ) && ( out_rc_prev[2] !== out_rc_expected_prev[2] )
		&& ((out_rc_expected_prev[2] !== last_out_rc_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rc_expected_prev);
		$display ("     Real value = %b", out_rc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out_rc_exp[2] = out_rc_expected_prev[2];
	end
	if (
		( out_rc_expected_prev[3] !== 1'bx ) && ( out_rc_prev[3] !== out_rc_expected_prev[3] )
		&& ((out_rc_expected_prev[3] !== last_out_rc_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_rc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_rc_expected_prev);
		$display ("     Real value = %b", out_rc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out_rc_exp[3] = out_rc_expected_prev[3];
	end
	if (
		( out_w_expected_prev[0] !== 1'bx ) && ( out_w_prev[0] !== out_w_expected_prev[0] )
		&& ((out_w_expected_prev[0] !== last_out_w_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[0] = out_w_expected_prev[0];
	end
	if (
		( out_w_expected_prev[1] !== 1'bx ) && ( out_w_prev[1] !== out_w_expected_prev[1] )
		&& ((out_w_expected_prev[1] !== last_out_w_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[1] = out_w_expected_prev[1];
	end
	if (
		( out_w_expected_prev[2] !== 1'bx ) && ( out_w_prev[2] !== out_w_expected_prev[2] )
		&& ((out_w_expected_prev[2] !== last_out_w_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[2] = out_w_expected_prev[2];
	end
	if (
		( out_w_expected_prev[3] !== 1'bx ) && ( out_w_prev[3] !== out_w_expected_prev[3] )
		&& ((out_w_expected_prev[3] !== last_out_w_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[3] = out_w_expected_prev[3];
	end
	if (
		( out_w_expected_prev[4] !== 1'bx ) && ( out_w_prev[4] !== out_w_expected_prev[4] )
		&& ((out_w_expected_prev[4] !== last_out_w_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[4] = out_w_expected_prev[4];
	end
	if (
		( out_w_expected_prev[5] !== 1'bx ) && ( out_w_prev[5] !== out_w_expected_prev[5] )
		&& ((out_w_expected_prev[5] !== last_out_w_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[5] = out_w_expected_prev[5];
	end
	if (
		( out_w_expected_prev[6] !== 1'bx ) && ( out_w_prev[6] !== out_w_expected_prev[6] )
		&& ((out_w_expected_prev[6] !== last_out_w_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[6] = out_w_expected_prev[6];
	end
	if (
		( out_w_expected_prev[7] !== 1'bx ) && ( out_w_prev[7] !== out_w_expected_prev[7] )
		&& ((out_w_expected_prev[7] !== last_out_w_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[7] = out_w_expected_prev[7];
	end
	if (
		( out_w_expected_prev[8] !== 1'bx ) && ( out_w_prev[8] !== out_w_expected_prev[8] )
		&& ((out_w_expected_prev[8] !== last_out_w_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[8] = out_w_expected_prev[8];
	end
	if (
		( out_w_expected_prev[9] !== 1'bx ) && ( out_w_prev[9] !== out_w_expected_prev[9] )
		&& ((out_w_expected_prev[9] !== last_out_w_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[9] = out_w_expected_prev[9];
	end
	if (
		( out_w_expected_prev[10] !== 1'bx ) && ( out_w_prev[10] !== out_w_expected_prev[10] )
		&& ((out_w_expected_prev[10] !== last_out_w_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[10] = out_w_expected_prev[10];
	end
	if (
		( out_w_expected_prev[11] !== 1'bx ) && ( out_w_prev[11] !== out_w_expected_prev[11] )
		&& ((out_w_expected_prev[11] !== last_out_w_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[11] = out_w_expected_prev[11];
	end
	if (
		( out_w_expected_prev[12] !== 1'bx ) && ( out_w_prev[12] !== out_w_expected_prev[12] )
		&& ((out_w_expected_prev[12] !== last_out_w_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[12] = out_w_expected_prev[12];
	end
	if (
		( out_w_expected_prev[13] !== 1'bx ) && ( out_w_prev[13] !== out_w_expected_prev[13] )
		&& ((out_w_expected_prev[13] !== last_out_w_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[13] = out_w_expected_prev[13];
	end
	if (
		( out_w_expected_prev[14] !== 1'bx ) && ( out_w_prev[14] !== out_w_expected_prev[14] )
		&& ((out_w_expected_prev[14] !== last_out_w_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[14] = out_w_expected_prev[14];
	end
	if (
		( out_w_expected_prev[15] !== 1'bx ) && ( out_w_prev[15] !== out_w_expected_prev[15] )
		&& ((out_w_expected_prev[15] !== last_out_w_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_w[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_w_expected_prev);
		$display ("     Real value = %b", out_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out_w_exp[15] = out_w_expected_prev[15];
	end
	if (
		( PC_out_expected_prev[0] !== 1'bx ) && ( PC_out_prev[0] !== PC_out_expected_prev[0] )
		&& ((PC_out_expected_prev[0] !== last_PC_out_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_out_exp[0] = PC_out_expected_prev[0];
	end
	if (
		( PC_out_expected_prev[1] !== 1'bx ) && ( PC_out_prev[1] !== PC_out_expected_prev[1] )
		&& ((PC_out_expected_prev[1] !== last_PC_out_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_out_exp[1] = PC_out_expected_prev[1];
	end
	if (
		( PC_out_expected_prev[2] !== 1'bx ) && ( PC_out_prev[2] !== PC_out_expected_prev[2] )
		&& ((PC_out_expected_prev[2] !== last_PC_out_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_out_exp[2] = PC_out_expected_prev[2];
	end
	if (
		( PC_out_expected_prev[3] !== 1'bx ) && ( PC_out_prev[3] !== PC_out_expected_prev[3] )
		&& ((PC_out_expected_prev[3] !== last_PC_out_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_out_exp[3] = PC_out_expected_prev[3];
	end
	if (
		( RF_Rp_addr_expected_prev[0] !== 1'bx ) && ( RF_Rp_addr_prev[0] !== RF_Rp_addr_expected_prev[0] )
		&& ((RF_Rp_addr_expected_prev[0] !== last_RF_Rp_addr_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_Rp_addr_exp[0] = RF_Rp_addr_expected_prev[0];
	end
	if (
		( RF_Rp_addr_expected_prev[1] !== 1'bx ) && ( RF_Rp_addr_prev[1] !== RF_Rp_addr_expected_prev[1] )
		&& ((RF_Rp_addr_expected_prev[1] !== last_RF_Rp_addr_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_Rp_addr_exp[1] = RF_Rp_addr_expected_prev[1];
	end
	if (
		( RF_Rp_addr_expected_prev[2] !== 1'bx ) && ( RF_Rp_addr_prev[2] !== RF_Rp_addr_expected_prev[2] )
		&& ((RF_Rp_addr_expected_prev[2] !== last_RF_Rp_addr_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_Rp_addr_exp[2] = RF_Rp_addr_expected_prev[2];
	end
	if (
		( RF_Rp_addr_expected_prev[3] !== 1'bx ) && ( RF_Rp_addr_prev[3] !== RF_Rp_addr_expected_prev[3] )
		&& ((RF_Rp_addr_expected_prev[3] !== last_RF_Rp_addr_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_Rp_addr_exp[3] = RF_Rp_addr_expected_prev[3];
	end
	if (
		( RF_Rp_rd_expected_prev !== 1'bx ) && ( RF_Rp_rd_prev !== RF_Rp_rd_expected_prev )
		&& ((RF_Rp_rd_expected_prev !== last_RF_Rp_rd_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_rd_expected_prev);
		$display ("     Real value = %b", RF_Rp_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_Rp_rd_exp = RF_Rp_rd_expected_prev;
	end
	if (
		( RF_Rq_addr_expected_prev[0] !== 1'bx ) && ( RF_Rq_addr_prev[0] !== RF_Rq_addr_expected_prev[0] )
		&& ((RF_Rq_addr_expected_prev[0] !== last_RF_Rq_addr_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_exp[0] = RF_Rq_addr_expected_prev[0];
	end
	if (
		( RF_Rq_addr_expected_prev[1] !== 1'bx ) && ( RF_Rq_addr_prev[1] !== RF_Rq_addr_expected_prev[1] )
		&& ((RF_Rq_addr_expected_prev[1] !== last_RF_Rq_addr_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_exp[1] = RF_Rq_addr_expected_prev[1];
	end
	if (
		( RF_Rq_addr_expected_prev[2] !== 1'bx ) && ( RF_Rq_addr_prev[2] !== RF_Rq_addr_expected_prev[2] )
		&& ((RF_Rq_addr_expected_prev[2] !== last_RF_Rq_addr_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_exp[2] = RF_Rq_addr_expected_prev[2];
	end
	if (
		( RF_Rq_addr_expected_prev[3] !== 1'bx ) && ( RF_Rq_addr_prev[3] !== RF_Rq_addr_expected_prev[3] )
		&& ((RF_Rq_addr_expected_prev[3] !== last_RF_Rq_addr_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_exp[3] = RF_Rq_addr_expected_prev[3];
	end
	if (
		( RF_Rq_rd_expected_prev !== 1'bx ) && ( RF_Rq_rd_prev !== RF_Rq_rd_expected_prev )
		&& ((RF_Rq_rd_expected_prev !== last_RF_Rq_rd_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_rd_expected_prev);
		$display ("     Real value = %b", RF_Rq_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_Rq_rd_exp = RF_Rq_rd_expected_prev;
	end
	if (
		( RF_s0_expected_prev !== 1'bx ) && ( RF_s0_prev !== RF_s0_expected_prev )
		&& ((RF_s0_expected_prev !== last_RF_s0_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s0_expected_prev);
		$display ("     Real value = %b", RF_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_RF_s0_exp = RF_s0_expected_prev;
	end
	if (
		( RF_s1_expected_prev !== 1'bx ) && ( RF_s1_prev !== RF_s1_expected_prev )
		&& ((RF_s1_expected_prev !== last_RF_s1_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s1_expected_prev);
		$display ("     Real value = %b", RF_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RF_s1_exp = RF_s1_expected_prev;
	end
	if (
		( RF_W_addr_expected_prev[0] !== 1'bx ) && ( RF_W_addr_prev[0] !== RF_W_addr_expected_prev[0] )
		&& ((RF_W_addr_expected_prev[0] !== last_RF_W_addr_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_exp[0] = RF_W_addr_expected_prev[0];
	end
	if (
		( RF_W_addr_expected_prev[1] !== 1'bx ) && ( RF_W_addr_prev[1] !== RF_W_addr_expected_prev[1] )
		&& ((RF_W_addr_expected_prev[1] !== last_RF_W_addr_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_exp[1] = RF_W_addr_expected_prev[1];
	end
	if (
		( RF_W_addr_expected_prev[2] !== 1'bx ) && ( RF_W_addr_prev[2] !== RF_W_addr_expected_prev[2] )
		&& ((RF_W_addr_expected_prev[2] !== last_RF_W_addr_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_exp[2] = RF_W_addr_expected_prev[2];
	end
	if (
		( RF_W_addr_expected_prev[3] !== 1'bx ) && ( RF_W_addr_prev[3] !== RF_W_addr_expected_prev[3] )
		&& ((RF_W_addr_expected_prev[3] !== last_RF_W_addr_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_exp[3] = RF_W_addr_expected_prev[3];
	end
	if (
		( RF_W_data_expected_prev[0] !== 1'bx ) && ( RF_W_data_prev[0] !== RF_W_data_expected_prev[0] )
		&& ((RF_W_data_expected_prev[0] !== last_RF_W_data_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[0] = RF_W_data_expected_prev[0];
	end
	if (
		( RF_W_data_expected_prev[1] !== 1'bx ) && ( RF_W_data_prev[1] !== RF_W_data_expected_prev[1] )
		&& ((RF_W_data_expected_prev[1] !== last_RF_W_data_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[1] = RF_W_data_expected_prev[1];
	end
	if (
		( RF_W_data_expected_prev[2] !== 1'bx ) && ( RF_W_data_prev[2] !== RF_W_data_expected_prev[2] )
		&& ((RF_W_data_expected_prev[2] !== last_RF_W_data_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[2] = RF_W_data_expected_prev[2];
	end
	if (
		( RF_W_data_expected_prev[3] !== 1'bx ) && ( RF_W_data_prev[3] !== RF_W_data_expected_prev[3] )
		&& ((RF_W_data_expected_prev[3] !== last_RF_W_data_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[3] = RF_W_data_expected_prev[3];
	end
	if (
		( RF_W_data_expected_prev[4] !== 1'bx ) && ( RF_W_data_prev[4] !== RF_W_data_expected_prev[4] )
		&& ((RF_W_data_expected_prev[4] !== last_RF_W_data_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[4] = RF_W_data_expected_prev[4];
	end
	if (
		( RF_W_data_expected_prev[5] !== 1'bx ) && ( RF_W_data_prev[5] !== RF_W_data_expected_prev[5] )
		&& ((RF_W_data_expected_prev[5] !== last_RF_W_data_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[5] = RF_W_data_expected_prev[5];
	end
	if (
		( RF_W_data_expected_prev[6] !== 1'bx ) && ( RF_W_data_prev[6] !== RF_W_data_expected_prev[6] )
		&& ((RF_W_data_expected_prev[6] !== last_RF_W_data_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[6] = RF_W_data_expected_prev[6];
	end
	if (
		( RF_W_data_expected_prev[7] !== 1'bx ) && ( RF_W_data_prev[7] !== RF_W_data_expected_prev[7] )
		&& ((RF_W_data_expected_prev[7] !== last_RF_W_data_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[7] = RF_W_data_expected_prev[7];
	end
	if (
		( RF_W_data_expected_prev[8] !== 1'bx ) && ( RF_W_data_prev[8] !== RF_W_data_expected_prev[8] )
		&& ((RF_W_data_expected_prev[8] !== last_RF_W_data_exp[8]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[8] = RF_W_data_expected_prev[8];
	end
	if (
		( RF_W_data_expected_prev[9] !== 1'bx ) && ( RF_W_data_prev[9] !== RF_W_data_expected_prev[9] )
		&& ((RF_W_data_expected_prev[9] !== last_RF_W_data_exp[9]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[9] = RF_W_data_expected_prev[9];
	end
	if (
		( RF_W_data_expected_prev[10] !== 1'bx ) && ( RF_W_data_prev[10] !== RF_W_data_expected_prev[10] )
		&& ((RF_W_data_expected_prev[10] !== last_RF_W_data_exp[10]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[10] = RF_W_data_expected_prev[10];
	end
	if (
		( RF_W_data_expected_prev[11] !== 1'bx ) && ( RF_W_data_prev[11] !== RF_W_data_expected_prev[11] )
		&& ((RF_W_data_expected_prev[11] !== last_RF_W_data_exp[11]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[11] = RF_W_data_expected_prev[11];
	end
	if (
		( RF_W_data_expected_prev[12] !== 1'bx ) && ( RF_W_data_prev[12] !== RF_W_data_expected_prev[12] )
		&& ((RF_W_data_expected_prev[12] !== last_RF_W_data_exp[12]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[12] = RF_W_data_expected_prev[12];
	end
	if (
		( RF_W_data_expected_prev[13] !== 1'bx ) && ( RF_W_data_prev[13] !== RF_W_data_expected_prev[13] )
		&& ((RF_W_data_expected_prev[13] !== last_RF_W_data_exp[13]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[13] = RF_W_data_expected_prev[13];
	end
	if (
		( RF_W_data_expected_prev[14] !== 1'bx ) && ( RF_W_data_prev[14] !== RF_W_data_expected_prev[14] )
		&& ((RF_W_data_expected_prev[14] !== last_RF_W_data_exp[14]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[14] = RF_W_data_expected_prev[14];
	end
	if (
		( RF_W_data_expected_prev[15] !== 1'bx ) && ( RF_W_data_prev[15] !== RF_W_data_expected_prev[15] )
		&& ((RF_W_data_expected_prev[15] !== last_RF_W_data_exp[15]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_expected_prev);
		$display ("     Real value = %b", RF_W_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_exp[15] = RF_W_data_expected_prev[15];
	end
	if (
		( RF_W_wr_expected_prev !== 1'bx ) && ( RF_W_wr_prev !== RF_W_wr_expected_prev )
		&& ((RF_W_wr_expected_prev !== last_RF_W_wr_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_wr_expected_prev);
		$display ("     Real value = %b", RF_W_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_RF_W_wr_exp = RF_W_wr_expected_prev;
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end
	if (
		( saida_expected_prev[8] !== 1'bx ) && ( saida_prev[8] !== saida_expected_prev[8] )
		&& ((saida_expected_prev[8] !== last_saida_exp[8]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[8] = saida_expected_prev[8];
	end
	if (
		( saida_expected_prev[9] !== 1'bx ) && ( saida_prev[9] !== saida_expected_prev[9] )
		&& ((saida_expected_prev[9] !== last_saida_exp[9]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[9] = saida_expected_prev[9];
	end
	if (
		( saida_expected_prev[10] !== 1'bx ) && ( saida_prev[10] !== saida_expected_prev[10] )
		&& ((saida_expected_prev[10] !== last_saida_exp[10]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[10] = saida_expected_prev[10];
	end
	if (
		( saida_expected_prev[11] !== 1'bx ) && ( saida_prev[11] !== saida_expected_prev[11] )
		&& ((saida_expected_prev[11] !== last_saida_exp[11]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[11] = saida_expected_prev[11];
	end
	if (
		( saida_expected_prev[12] !== 1'bx ) && ( saida_prev[12] !== saida_expected_prev[12] )
		&& ((saida_expected_prev[12] !== last_saida_exp[12]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[12] = saida_expected_prev[12];
	end
	if (
		( saida_expected_prev[13] !== 1'bx ) && ( saida_prev[13] !== saida_expected_prev[13] )
		&& ((saida_expected_prev[13] !== last_saida_exp[13]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[13] = saida_expected_prev[13];
	end
	if (
		( saida_expected_prev[14] !== 1'bx ) && ( saida_prev[14] !== saida_expected_prev[14] )
		&& ((saida_expected_prev[14] !== last_saida_exp[14]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[14] = saida_expected_prev[14];
	end
	if (
		( saida_expected_prev[15] !== 1'bx ) && ( saida_prev[15] !== saida_expected_prev[15] )
		&& ((saida_expected_prev[15] !== last_saida_exp[15]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_exp[15] = saida_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire alu_s0;
wire alu_s1;
wire [7:0] D_addr;
wire D_rd;
wire D_wr;
wire DES;
wire E_D;
wire I_rd;
wire [15:0] IR_out;
wire [3:0] out_ra;
wire [3:0] out_rb;
wire [3:0] out_rc;
wire [15:0] out_w;
wire [3:0] PC_out;
wire [3:0] RF_Rp_addr;
wire RF_Rp_rd;
wire [3:0] RF_Rq_addr;
wire RF_Rq_rd;
wire RF_s0;
wire RF_s1;
wire [3:0] RF_W_addr;
wire [15:0] RF_W_data;
wire RF_W_wr;
wire [15:0] saida;

wire sampler;                             

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.clk(clk),
	.D_addr(D_addr),
	.D_rd(D_rd),
	.D_wr(D_wr),
	.DES(DES),
	.E_D(E_D),
	.I_rd(I_rd),
	.IR_out(IR_out),
	.out_ra(out_ra),
	.out_rb(out_rb),
	.out_rc(out_rc),
	.out_w(out_w),
	.PC_out(PC_out),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_rd(RF_Rp_rd),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_rd(RF_Rq_rd),
	.RF_s0(RF_s0),
	.RF_s1(RF_s1),
	.RF_W_addr(RF_W_addr),
	.RF_W_data(RF_W_data),
	.RF_W_wr(RF_W_wr),
	.saida(saida)
);

// clk
always
begin
	clk = 1'b0;
	clk = #12500 1'b1;
	#12500;
end 

processador_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

processador_vlg_check_tst tb_out(
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.D_addr(D_addr),
	.D_rd(D_rd),
	.D_wr(D_wr),
	.DES(DES),
	.E_D(E_D),
	.I_rd(I_rd),
	.IR_out(IR_out),
	.out_ra(out_ra),
	.out_rb(out_rb),
	.out_rc(out_rc),
	.out_w(out_w),
	.PC_out(PC_out),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_rd(RF_Rp_rd),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_rd(RF_Rq_rd),
	.RF_s0(RF_s0),
	.RF_s1(RF_s1),
	.RF_W_addr(RF_W_addr),
	.RF_W_data(RF_W_data),
	.RF_W_wr(RF_W_wr),
	.saida(saida),
	.sampler_rx(sampler)
);
endmodule

